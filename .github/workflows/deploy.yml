name: Deploy to dev env

on:
    push:
        branches:
            - main
jobs:
    build-docker:
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v2
              with:
                  token: ${{ secrets.PRIVATE_TOKEN }}
                  submodules: true

            - name: setup jdk 17
              uses: actions/setup-java@v2
              with:
                  distribution: 'adopt'
                  java-version: '17'
                  cache: 'gradle'

            - name: add permission to gradlew
              run: chmod +x ./gradlew
              shell: bash

            - name: aws configure
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-2

            - name: Login to ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: build docker file and setting deploy files
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: test
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
                docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                

                

            
            




    deploy:
      needs: build
      name: CD
      runs-on: [self-hosted, label-ecr-test]

      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-northeast-2

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Pull image from Amazon ECR and restart container
          run: |
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker stop test_con && docker rm test_con
            docker run -d --name test -p 8080:8090 --restart unless-stopped ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
